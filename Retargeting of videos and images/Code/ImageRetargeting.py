# -*- coding: utf-8 -*-
"""Retargeting3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lxm_9HctKemebKR1qQ21xJG2YlqtnO2G
"""

!pip install opencv-python
!pip install igraph
!pip install PyMaxflow

import networkx as nx
import cv2
import numpy as np
import igraph
import maxflow
import time

def create_graph(im1):
  vids = {}
  gim1 = cv2.cvtColor(im1, cv2.COLOR_BGR2GRAY)
  id=0
  for i in range(gim1.shape[0]):
    for j in range(gim1.shape[1]):
      vids[(i,j)] = id
      id+=1
  g = maxflow.Graph[float](gim1.shape[0]*gim1.shape[1], gim1.shape[0]*gim1.shape[1]*6)
  nodes = g.add_nodes(gim1.shape[0]*gim1.shape[1])
  for i in range(gim1.shape[0]):
    for j in range(gim1.shape[1]):
      if j!=0 and j!=(gim1.shape[1]-1):
        g.add_edge(vids[(i,j)],vids[(i,j+1)],abs(gim1[i,j+1]-gim1[i,j-1]),float('inf'))
      elif j==0:
        g.add_edge(vids[(i,j)],vids[(i,j+1)],abs(gim1[i,j+1]),float('inf'))
      if i!=0 and j!=0:
        g.add_edge(vids[(i,j)],vids[(i-1,j-1)],float('inf'),0)
      if i!=(gim1.shape[0]-1) and j!=0:
        g.add_edge(vids[(i,j)],vids[(i+1,j)],abs(gim1[i+1,j] - gim1[i,j-1]),abs(gim1[i,j] - gim1[i+1,j-1]))
      elif j==0 and i!=(gim1.shape[0]-1):
        g.add_edge(vids[(i,j)],vids[(i+1,j)],abs(gim1[i+1,j]),abs(gim1[i,j]))
      if i!=(gim1.shape[0]-1) and j!=0:
        g.add_edge(vids[(i,j)],vids[(i+1,j-1)],float('inf'),0)
      if j==0:
        g.add_tedge(vids[(i,j)],float('inf'),0)
      if j==(gim1.shape[1]-1):
        g.add_tedge(vids[(i,j)],0,float('inf'))
  return g, vids

def retarget(im1,name):
  scount = round(0.25*im1.shape[1])
  print(im1.shape)
  rows = im1.shape[0]
  im1 = cv2.blur(im1,(3,3))
  for count in range(scount):
    print(f'{count+1}/{scount}')
    g,vids = create_graph(im1)
    flow = g.maxflow()
    mask = np.ones(im1.shape, dtype=bool)
    for i in range(mask.shape[0]):
      for j in range(mask.shape[1]):
        if (j+1)==mask.shape[1]:
          mask[i,j,:] = [False,False,False]
          break
        if g.get_segment(vids[(i,j)])!=g.get_segment(vids[(i,j+1)]):
          mask[i,j,:] = [False,False,False]
          break
    result = im1[mask].reshape((im1.shape[0],im1.shape[1]-1,3))
    im1 = result[:,:,:]
  cv2.imwrite(name,im1)
  return im1

im = cv2.imread('2.jpg')
retarget(im,'retarget2.jpg')

im = cv2.imread('1.jpg')
retarget(im,'retarget1.jpg')

im = cv2.imread('3.jpg')
retarget(im,'retarget3.jpg')

im = cv2.imread('buddha.png')
retarget(im,'retarget_buddha.jpg')