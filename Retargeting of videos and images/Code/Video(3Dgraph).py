# -*- coding: utf-8 -*-
"""RetargetVideo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xhEdl0myb6_loDwjpOEjvuWZ8_a1Nfu3
"""

!pip install opencv-python
!pip install igraph
!pip install PyMaxflow

import networkx as nx
import cv2
import numpy as np
import igraph
import maxflow

def create_graph(im1):
  vids = {}
  w,h,c,t = im1.shape
  gim1 = cv2.cvtColor(im1[:,:,:,0], cv2.COLOR_BGR2GRAY).reshape((w,h,1))
  for i in range(1,t):
    gim1 = np.concatenate([gim1,cv2.cvtColor(im1[:,:,:,i], cv2.COLOR_BGR2GRAY).reshape((w,h,1))],axis=2)
  id=0
  for i in range(gim1.shape[0]):
    for j in range(gim1.shape[1]):
      for t in range(gim1.shape[2]):
        vids[(i,j,t)] = id
        id+=1
  print('create_graph',gim1.shape)
  g = maxflow.Graph[float](gim1.shape[0]*gim1.shape[1], gim1.shape[0]*gim1.shape[1]*6)
  nodes = g.add_nodes(gim1.shape[0]*gim1.shape[1]*gim1.shape[2])
  for t in range(gim1.shape[2]):
    for i in range(gim1.shape[0]):
      for j in range(gim1.shape[1]):
        #print(t,i,j)
        if j!=0 and j!=(gim1.shape[1]-1):
          g.add_edge(vids[(i,j,t)],vids[(i,j+1,t)],abs(gim1[i,j+1,t]-gim1[i,j-1,t]),float('inf'))
        elif j==0:
          g.add_edge(vids[(i,j,t)],vids[(i,j+1,t)],abs(gim1[i,j+1,t]),float('inf'))
        if i!=0 and j!=0:
          g.add_edge(vids[(i,j,t)],vids[(i-1,j-1,t)],float('inf'),0)
        if i!=(gim1.shape[0]-1) and j!=0:
          #print(vids[(i,j,t)],vids[(i+1,j,t)],abs(gim1[i+1,j,t] - gim1[i,j-1,t]),abs(gim1[i,j,t] - gim1[i+1,j-1,t]))
          g.add_edge(vids[(i,j,t)],vids[(i+1,j,t)],abs(gim1[i+1,j,t] - gim1[i,j-1,t]),abs(gim1[i,j,t] - gim1[i+1,j-1,t]))
        elif j==0 and i!=(gim1.shape[0]-1):
          g.add_edge(vids[(i,j,t)],vids[(i+1,j,t)],abs(gim1[i+1,j,t]),abs(gim1[i,j,t]))
        if i!=(gim1.shape[0]-1) and j!=0:
          g.add_edge(vids[(i,j,t)],vids[(i+1,j-1,t)],float('inf'),0)
        if j==0:
          g.add_tedge(vids[(i,j,t)],float('inf'),0)
        if j==(gim1.shape[1]-1):
          g.add_tedge(vids[(i,j,t)],0,float('inf'))
  for t in range(gim1.shape[1]):
    for i in range(gim1.shape[0]):
      for j in range(gim1.shape[2]):
        #print(i,t,j)
        if j!=0 and j!=(gim1.shape[2]-1):
          g.add_edge(vids[(i,t,j)],vids[(i,t,j+1)],abs(gim1[i,t,j+1]-gim1[i,t,j-1]),float('inf'))
        elif j==0:
          g.add_edge(vids[(i,t,j)],vids[(i,t,j+1)],abs(gim1[i,t,j+1]),float('inf'))
        if i!=0 and j!=0:
          g.add_edge(vids[(i,t,j)],vids[(i-1,t,j-1)],float('inf'),0)
        if i!=(gim1.shape[0]-1) and j!=0:
          g.add_edge(vids[(i,t,j)],vids[(i+1,t,j)],abs(gim1[i+1,t,j] - gim1[i,t,j-1]),abs(gim1[i,t,j] - gim1[i+1,t,j-1]))
        elif j==0 and i!=(gim1.shape[0]-1):
          g.add_edge(vids[(i,t,j)],vids[(i+1,t,j)],abs(gim1[i+1,t,j]),abs(gim1[i,t,j]))
        if i!=(gim1.shape[0]-1) and j!=0:
          g.add_edge(vids[(i,t,j)],vids[(i+1,t,j-1)],float('inf'),0)
  return g, vids

def retarget(im1,name):
  scount = round(0.25*im1.shape[1])
  print(im1.shape)
  rows = im1.shape[0]
  for count in range(scount):
    print(f'{count+1}/{scount}')
    g,vids = create_graph(im1)
    flow = g.maxflow()
    mask = np.zeros((im1.shape[0],im1.shape[1]-1,3,im1.shape[3]))
    for i in range(mask.shape[0]):
      for t in range(mask.shape[3]):
        y=0
        for j in range(mask.shape[1]):
          if g.get_segment(vids[(i,j,t)])==g.get_segment(vids[(i,j+1,t)]):
            for k in range(3):
              mask[i,y,k,t] = im1[i,j,k,t]
            y+=1
    print(mask.shape)
    #result = im1[mask].reshape((im1.shape[0],im1.shape[1]-1,3,im1.shape[3]))
    im1 = np.uint8(mask[:,:,:,:])
  return im1

def create_video(reel,n_frames):
  size = (oh-2*80,ow)
  fourcc = cv2.VideoWriter_fourcc(*'mp4v')
  out = cv2.VideoWriter('project.mp4',fourcc, 15, size, True)
  for i in range(n_frames):
    # print(reel[i])
    out.write(cv2.resize(reel[:,:,:,i],(0,0),fx=2,fy=2))
  out.release()
def create_video2(reel,n_frames):
  size = (reel.shape[1],reel.shape[0])
  print(size,reel.shape)
  fourcc = cv2.VideoWriter_fourcc(*'mp4v')
  out = cv2.VideoWriter('project2.mp4',fourcc, 15, size, True)
  for i in range(n_frames):
    # print(reel[i])
    out.write(reel[:,:,:,i])
  out.release()
def create_video3(reel,n_frames):
  size = (oh-2*80,ow)
  fourcc = cv2.VideoWriter_fourcc(*'mp4v')
  out = cv2.VideoWriter('project3.mp4',fourcc, 15, size, True)
  kernel = np.array([[0, -1, 0],
                   [-1, 5,-1],
                   [0, -1, 0]])
  for i in range(n_frames):
    # print(reel[i])
    image_sharp = cv2.filter2D(src=cv2.resize(reel[:,:,:,i],(0,0),fx=2,fy=2), ddepth=-1, kernel=kernel)
    out.write(image_sharp)
  out.release()

video = cv2.VideoCapture('/content/ratatouille1-resize.mov')
ret, frames = video.read()
ow,oh,oc = frames.shape
frames = cv2.blur(frames,(3,3))
frames = cv2.resize(frames,(0,0),fx=0.5,fy=0.5)
w,h,c = frames.shape
frames = frames.reshape((w,h,c,1))
i=0
while video.isOpened():
  ret, frame = video.read()
  try:
    frame = cv2.blur(frame,(3,3))
    frame = cv2.resize(frame,(0,0),fx=0.5,fy=0.5)
    frame = frame.reshape((w,h,c,1))
    frames = np.concatenate([frames,frame],axis=3)
  except:
    break
video.release()
print(frames.shape)

vid = retarget(frames, 'abc')
create_video(np.uint8(vid),15)